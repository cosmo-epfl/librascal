# =============================================================================
# file   CMakeLists.txt
#
# @author Till Junge <till.junge@epfl.ch
# @author Felix Musil <felix.musil@epfl.ch>
# @author Markus Stricker <markus.stricker@epfl.ch>
#
# @date   17 Jan 2019
#
# @brief  Main configuration file
#
# @section LICENSE
#
# Copyright © 2018 Till Junge, Felix Musil, Markus Stricker, COSMO (EPFL), LAMMM
# (EPFL)
#
# Rascal is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3, or (at
# your option) any later version.
#
# Rascal is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Rascal; see the file COPYING. If not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
# =============================================================================

cmake_minimum_required(VERSION 3.0)

# https://cmake.org/pipermail/cmake/2008-September/023808.html
# If the user specifies -DCMAKE_BUILD_TYPE on the command line, take their
# definition
# and dump it in the cache along with proper documentation, otherwise set
# CMAKE_BUILD_TYPE
# to Debug prior to calling PROJECT()
#
IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of
build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug
Release RelWithDebInfo MinSizeRel.")
ELSE()
   SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build,
options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release
RelWithDebInfo MinSizeRel.")
ENDIF()
# Set the possible values of build type for cmake-gui
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
"Release" "Debug" "RelWithDebInfo" "MinSizeRel")

message(STATUS "Build type is: ${CMAKE_BUILD_TYPE}")

project(rascal CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(BUILD_SHARED_LIBS ON)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
include(rascalTools)

########## MAIN VARIABLE TO CHANGE THE BUILD AND INSTALL OF THE LIBRARY ########
option(BUILD_BINDINGS "Build the python bindings" ON)
option(BUILD_EXAMPLES "Build the examples" ON)
option(BUILD_TESTS "Build the unit tests" OFF)
option(BUILD_DOC "Build documentation" OFF)
option(USER "Switch installation folder" OFF)

set(INSTALL_PATH "" CACHE STRING "Path to install the libraries")

SET(TYPE_ARCHITECTURE "native" CACHE STRING "Choose the type of architecture to compile to in release mode. Default is to let the compiler decide")

########## COMPILATION FLAGS ##########
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Weffc++")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
    "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR
    "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")

    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Og")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Og")

    # Add -march=${TYPE_ARCHITECTURE} (-march=native by default) to the release
    # build flags
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -march=${TYPE_ARCHITECTURE}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=${TYPE_ARCHITECTURE}")

    set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} -march=${TYPE_ARCHITECTURE}")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -march=${TYPE_ARCHITECTURE}")
endif()

########## START CONFIGURATION ##########

# Find correct python version
find_package(PythonLibsNew 3 MODULE REQUIRED)

# set the name of the c++ libraries
if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
    CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
  set(LIBRASCAL_NAME "rascal-dbg")
  set(WIGXJPF_NAME "wigxjpf-dbg")
else()
  set(LIBRASCAL_NAME "rascal")
  set(WIGXJPF_NAME "wigxjpfo")
endif()

add_external_package(wigxjpf VERSION 1.9 CONFIG)

add_external_package(Eigen3 VERSION 3.3.4 CONFIG)


# Try to find optional cpp linter
include(cpplint)

# Check for clang-format
include(clangformat)

# CHeck for autopep8
include(autopep8)

# set up bindings
if(BUILD_BINDINGS)
  find_package(PythonLibsNew 3 MODULE REQUIRED)

  # warning about potential side effects of the installation of the python library
  if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
      CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    if(NOT PYTHON_IS_DEBUG)
      message(WARNING "The current configuration will build debug libraries "
              "not linked to a debug python interpreter. "
              "Installation target might overwrite the python bindings "
              "library with a debug build !"
              "see https://wiki.ubuntu.com/PyDbgBuilds or "
              "https://gist.github.com/bombs-kim/c9848c2b09962f2fd753b48b6d2cd87ffor sources and "
              "https://jml.io/2015/08/debugging-python-with-gdb.html for more informations "
              " on how to debug c++ code from python.")
    endif()
  endif()

  add_external_package(pybind11 VERSION 2.3.0 CONFIG)

    # Get where python site-packages is
    if(NOT USER)
    execute_process ( COMMAND "${PYTHON_EXECUTABLE}" -c "from distutils.sysconfig import \
                      get_python_lib; print(get_python_lib())"
      OUTPUT_VARIABLE PYTHON_SITE_PACKAGES OUTPUT_STRIP_TRAILING_WHITESPACE
      )
  else()
    # Get where python local site-packages is
    execute_process ( COMMAND "${PYTHON_EXECUTABLE}" -c "import site; \
                      print(site.USER_SITE)"
      OUTPUT_VARIABLE PYTHON_SITE_PACKAGES OUTPUT_STRIP_TRAILING_WHITESPACE
      )
  endif()

  execute_process ( COMMAND "${PYTHON_EXECUTABLE}" -c "import sys; \
                    print(sys.prefix)"
    OUTPUT_VARIABLE PACKAGE_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE
    )
endif()

# figure out where to install the library
if(NOT "${INSTALL_PATH}" STREQUAL "")
  set(CMAKE_INSTALL_PREFIX "${INSTALL_PATH}")
elseif(NOT BUILD_BINDINGS AND NOT USER)
  set(CMAKE_INSTALL_PREFIX "/usr")
  message(STATUS "INSTALLATION REQUIRES SUDO RIGHTS")
elseif(NOT BUILD_BINDINGS AND USER)
  set(CMAKE_INSTALL_PREFIX "$ENV{HOME}/.local")
elseif(BUILD_BINDINGS AND NOT USER)
  set(CMAKE_INSTALL_PREFIX "${PACKAGE_PREFIX}")
elseif(BUILD_BINDINGS AND USER)
  set(CMAKE_INSTALL_PREFIX "$ENV{HOME}/.local")
endif()

message(STATUS "Installation ROOT: ${CMAKE_INSTALL_PREFIX}")


# Always use full RPATH
# https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/RPATH-handling
set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

# utility to force copy of files...
add_custom_command(
    OUTPUT always_rebuild
    COMMAND ${CMAKE_COMMAND} -E echo
  )

# set up the tests
if (${BUILD_TESTS})
  find_package(Boost REQUIRED COMPONENTS unit_test_framework )
  enable_testing()
  # build c++ tests and add to test suite
  file( GLOB TEST_SRCS "${CMAKE_SOURCE_DIR}/tests/test_*.cc")

  add_executable(main_test_suite tests/main_test_suite.cc ${TEST_SRCS})

  # https://stackoverflow.com/questions/7781374/boost-test-linking
  ADD_DEFINITIONS(-DBOOST_TEST_DYN_LINK)

  target_include_directories(main_test_suite SYSTEM PRIVATE ${Boost_INCLUDE_DIR})
  target_link_libraries(main_test_suite ${Boost_LIBRARIES} "${LIBRASCAL_NAME}")
  add_test(main_test_suite main_test_suite --report_level=detailed --build_info=TRUE)

  if(BUILD_BINDINGS)

    add_custom_target(py_test ALL
      DEPENDS
        copy_test_py
      )

    add_dependencies(py_test main_test_suite)

    add_custom_command(OUTPUT copy_test_py
      COMMAND ${CMAKE_COMMAND} -E copy_directory
      ${CMAKE_SOURCE_DIR}/tests/python ${CMAKE_BINARY_DIR}/
      DEPENDS
          always_rebuild
    )

    add_test(python_binding_test python_binding_tests.py)
  endif()


endif(${BUILD_TESTS})

# copy reference data that might be used in the example
add_custom_target(copy_reference_data ALL
    DEPENDS
    copy_test_reference_data
  )

add_custom_command(OUTPUT copy_test_reference_data
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_SOURCE_DIR}/tests/reference_data ${CMAKE_BINARY_DIR}/reference_data
    DEPENDS
        always_rebuild
  )

add_subdirectory(src)

if(BUILD_BINDINGS)
    add_subdirectory(bindings)
endif()

if(BUILD_DOC)
    add_subdirectory(docs)
endif()

if (${BUILD_EXAMPLES})
  # compile exmaples executables
  file( GLOB binaries "${CMAKE_SOURCE_DIR}/examples/*.cc")
  foreach(binaryfile ${binaries})
    get_filename_component(binaryname  ${binaryfile} NAME_WE)
    add_executable(${binaryname} ${binaryfile})
    target_link_libraries(${binaryname} "${LIBRASCAL_NAME}")
  endforeach(binaryfile ${binaries})
  configure_file("${CMAKE_SOURCE_DIR}/examples/reference_data/crystal_structure.json" ${CMAKE_BINARY_DIR} COPYONLY)
  configure_file("${CMAKE_SOURCE_DIR}/examples/reference_data/alanine-X.json" ${CMAKE_BINARY_DIR} COPYONLY)
  configure_file("${CMAKE_SOURCE_DIR}/tests/reference_data/alanine-center-select.json" ${CMAKE_BINARY_DIR} COPYONLY)
endif (${BUILD_EXAMPLES})


# or copy them
file (GLOB pybins "${CMAKE_SOURCE_DIR}/bin/*.py")
foreach(pybin ${pybins})
  get_filename_component(binaryname  ${pybin} NAME_WE)
  configure_file(
    ${pybin}
    "${CMAKE_BINARY_DIR}/${binaryname}.py"
    COPYONLY)
endforeach(pybin ${pybins})

# Checking hh/cc files for compliance with coding conventions
if(CPPLINT_FOUND)
  # register the folders to check for cpp code conventions compliance
  cpplint_add_subdirectory("${CMAKE_SOURCE_DIR}/src" "")
  cpplint_add_subdirectory("${CMAKE_SOURCE_DIR}/tests" "")
  cpplint_add_subdirectory("${CMAKE_SOURCE_DIR}/bindings" "")
  cpplint_add_subdirectory("${CMAKE_SOURCE_DIR}/examples"
  "--filter=-build/namespaces")
endif()

# Add all hh/cc files for autoformatting with clang-format
if(CLANG_FORMAT_FOUND)
  # register the folders to apply clang-format with given configuration
  # .clang-format in project root folder
  clang_format_add_subdirectory("${CMAKE_SOURCE_DIR}/src" "")
  clang_format_add_subdirectory("${CMAKE_SOURCE_DIR}/tests" "")
  clang_format_add_subdirectory("${CMAKE_SOURCE_DIR}/bindings" "")
  clang_format_add_subdirectory("${CMAKE_SOURCE_DIR}/examples")
endif()

# Add python files for autoformatting with autopep8
if(AUTOPEP8_FOUND)
  # register the folders to apply autopep8 with given configuration
  # .pycodestyle in project root folder
  autopep8_add_subdirectory("${CMAKE_SOURCE_DIR}/tests" "")
  autopep8_add_subdirectory("${CMAKE_SOURCE_DIR}/bindings" "")
  autopep8_add_subdirectory("${CMAKE_SOURCE_DIR}/scripts" "")
endif()

# Removes every file in the build folder except the external libraries to
# prevent redownloading external libraries
add_custom_target(
    deepclean
    COMMAND "${PYTHON_EXECUTABLE}" ${CMAKE_SOURCE_DIR}/scripts/developer_utils.py deepclean
  )
